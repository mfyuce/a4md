[General]
check-signals=false
sim-time-limit = ${timeLimit=12h}
debug-on-errors = true
print-undisposed = true

cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-redirect-output=true

### Recording/Output Parameters
**.scalar-recording = true
**.vector-recording = true
# Store results in SQLite database
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

cmdenv-output-file = ${resultdir}/${configname},${iterationvarsf},${datetime}_run_${runnumber}-${repetition}.out
output-vector-file = ${resultdir}/${configname},${iterationvarsf},${datetime}_run_${runnumber}-${repetition}.vec
output-scalar-file = ${resultdir}/${configname},${iterationvarsf},${datetime}_run_${runnumber}-${repetition}.sca
eventlog-file =      ${resultdir}/${configname},${iterationvarsf},${datetime}_run_${runnumber}-${repetition}.elog
snapshot-file =      ${resultdir}/${configname},${iterationvarsf},${datetime}_run_${runnumber}-${repetition}.snap


### Evaluation Parameters
#**.2 = ${omittedReportsCount=20}
**.3a = ${checkTypeVehicle=   0,0,1}
**.3b = ${checkTypeAuthority= 0,1,1 ! checkTypeVehicle}
#**.2 = ${omittedReportsCount=3,5,10,25,50,75,100,500,1000,2147483646}
#**.4 = ${vectorRecording=false,true}

# Use only the same penetration rates for both CA and CP service
#**.5 = ${plainRate=     0.950, 0.90, 0.850, 0.80, 0,750, 0.70, 0.60, 0.40, 0.20, 0.00}
#**.6 = ${benignRate=    0.045, 0.09, 0.135, 0.18, 0,225, 0.27, 0.36, 0.54, 0.72, 0.90 ! plainRate}
#**.7 = ${maliciousRate= 0.005, 0.01, 0.015, 0.02, 0,025, 0.03, 0.04, 0.06, 0.08, 0.10 ! plainRate}
#**.5 = ${plainRate=     0.950, 0.90, 0.850, 0.80}
#**.6 = ${benignRate=    0.045, 0.09, 0.135, 0.18 ! plainRate}
#**.7 = ${maliciousRate= 0.005, 0.01, 0.015, 0.02 ! plainRate}


**.5 = ${plainRate=     0.950, 0.850, 0.750}
**.6 = ${benignRate=    0.045, 0.135, 0.225 ! plainRate}
**.7 = ${maliciousRate= 0.005, 0.015, 0.025 ! plainRate}

#*.traci.launcher.sumo = "sumo-gui"
**.identityRegistryModule = "idRegistry"
*.traci.mapper.typename = "traci.MultiTypeModuleMapper"
*.traci.core.version = -1
*.traci.launcher.typename = "PosixLauncher"


#*.traci.mapper.typename = "traci.MultiTypeModuleMapper"
#*.traci.mapper.vehicleTypes = xmldoc("vehicles.xml")
*.traci.mapper.vehicleTypes = xml \
("\
<vehicles> \
<vehicle type=\"artery.envmod.Car\" rate=\"${benignRate}\" /> \
<vehicle type=\"artery.application.misbehavior.MisbehaviorCar\" rate=\"${maliciousRate}\" /> \
</vehicles> \
")
#<vehicle type=\"artery.inet.PlainVehicle\" rate=\"${plainRate}\" /> \
#

image-path = "f2md-networks/images"

### RNG configuration

seed-set = ${repetition}
repeat = 3

# SUMO seed (default value)
*.traci.launcher.seed = 23423

# RNG 0 is used by:
# - `packetErrorRate` result recorder for radio
num-rngs = 8
# separate random number generator for vehicle penetration rate
*.traci.mapper.rng-0 = 1
# equipping services via FilterRules & update jitter
*.node[*].middleware.rng-0 = 2
# for MisbehaviorCaService
*.node[*].middleware.MisbehaviorCaService.rng-0 = 3
# for other Services
*.node[*].middleware.**.rng-0 = 4
# equipping sensors in LocalEnvironmentModel via FilterRules
*.node[*].environmentModel.rng-0 = 5
# for insertion delay in InsertionDelayVehiclePolicy
*.traci.nodes.vehiclePolicy[1].rng-0 = 6
# for generating the number of backoff slots used in contention
*.node[*].wlan[*].mac.hcf.edca.edcaf[*].contention.rng-0 = 7


*.annotations.draw = true

*.connectionManager.maxInterfDist = 1500m
*.connectionManager.sendDirect = true
*.connectionManager.coreDebug = false



network = artery.application.misbehavior.World

*.withObstacles = true
*.obstacles.obstacles = xmldoc("config.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles")

*.node[*].nic.mac1609_4.txPower = 126mW
*.node[*].nic.phy80211p.decider = xmldoc("config.xml")
*.node[*].nic.phy80211p.analogueModels = xmldoc("config.xml")

*.node[*].wlan[*].**.statistic-recording = false
*.node[*].wlan[*].**.scalar-recording = false
*.node[*].wlan[*].**.vector-recording = false
*.node[*].wlan[*].**.scalar-recording = false


*.environmentModel.drawObstacles = false
*.environmentModel.drawVehicles = false
*.environmentModel.obstacleTypes = "building"
*.environmentModel.drawObstacles = false
*.environmentModel.drawVehicles = false
*.environmentModel.preselectionMethod = 1
*.environmentModel.obstacleTypes = "building shop"
*.environmentModel.traciModule = "traci"
*.environmentModel.nodeMobilityModule = ".mobility"
*.node[*].environmentModel.sensors = xmldoc("sensors.xml")

*.node[*].environmentModel.*.drawSensorCone = true
*.node[*].environmentModel.*.drawLinesOfSight = true
*.node[*].environmentModel.*.drawDetectedObjects = true
*.node[*].environmentModel.*.drawBlockingObstacles = true

*.node[*].environmentModel.FrontLongRangeRadar.fovRange = 150m
*.node[*].environmentModel.FrontLongRangeRadar.fovAngle = 10

*.node[*].environmentModel.FrontShortRangeRadar.fovRange = 65m
*.node[*].environmentModel.FrontShortRangeRadar.fovAngle = 80
*.node[*].environmentModel.FrontShortRangeRadar.numSegments = 4

*.node[*].environmentModel.RearLongRangeRadar.fovRange = 150m
*.node[*].environmentModel.RearLongRangeRadar.fovAngle = 10

*.node[*].environmentModel.RearShortRangeRadar.fovRange = 65m
*.node[*].environmentModel.RearShortRangeRadar.fovAngle = 80
*.node[*].environmentModel.RearShortRangeRadar.numSegments = 4

*.node[*].environmentModel.SeeThrough.fovRange = 50m

*.node[*].middleware.updateInterval = 0.1s
*.node[*].middleware.datetime = "2013-06-01 12:35:00"
*.node[*].middleware.services = xmldoc("services.xml")
*.node[*].middleware.misbehaviorUpdateInterval = 0.01s

##### F2MD Parameters

### Misbehavior Authority Parameters
World.misbehaviorAuthority.datetime = "2013-06-01 12:35:00"
#World.misbehaviorAuthority.checkType = 1
World.misbehaviorAuthority.checkType = ${checkTypeAuthority}

### Attack Parameters
*.node[*].middleware.MisbehaviorCaService.StaticAttackType = intuniform(0,19)

*.node[*].middleware.MisbehaviorCaService.AttackEventualStopProbabilityThreshold = 0.005

*.node[*].middleware.MisbehaviorCaService.AttackRandomPositionOffsetMaxLatitudeOffset = 0.005
*.node[*].middleware.MisbehaviorCaService.AttackRandomPositionOffsetMaxLongitudeOffset = 0.005

*.node[*].middleware.MisbehaviorCaService.AttackGridSybilVehicleCountVariation = 0
*.node[*].middleware.MisbehaviorCaService.AttackGridSybilDistanceX = 3
*.node[*].middleware.MisbehaviorCaService.AttackGridSybilMaxDistanceFromRoad = 15

### Detection Parameters
*.node[*].middleware.MisbehaviorDetectionService.checkType = ${checkTypeVehicle}
#*.node[*].middleware.MisbehaviorDetectionService.checkType = 1

*.node[*].middleware.MisbehaviorDetectionService.detectLevelsLowerThanHighest = true
*.node[*].middleware.MisbehaviorDetectionService.detectLevel4Probability = 1
*.node[*].middleware.MisbehaviorDetectionService.detectLevel3Probability = 1
*.node[*].middleware.MisbehaviorDetectionService.detectLevel2Probability = 1
*.node[*].middleware.MisbehaviorDetectionService.detectLevel1Probability = 1

*.node[*].middleware.MisbehaviorDetectionService.evidenceContainerMaxCamCount = 10
#*.node[*].middleware.MisbehaviorDetectionService.omittedReportsCount = ${omittedReportsCount}
*.node[*].middleware.MisbehaviorDetectionService.omittedReportsCount = 20
*.node[*].middleware.MisbehaviorDetectionService.detectedSenderCamArrayMaxSize = 10


[Config f2md-LuSTNanoScenario]

*.traci.launcher.sumocfg = "f2md-networks/LuSTNanoScenario/due.actuated.sumocfg"

*.node[*].middleware.MisbehaviorCaService.AttackConstantPositionMinLatitude = 49.586
*.node[*].middleware.MisbehaviorCaService.AttackConstantPositionMaxLatitude = 49.598
*.node[*].middleware.MisbehaviorCaService.AttackConstantPositionMinLongitude = 6.114
*.node[*].middleware.MisbehaviorCaService.AttackConstantPositionMaxLongitude = 6.134

[Config f2md-LuSTMiniScenario]

extends = f2md-LuSTNanoScenario

*.traci.launcher.sumocfg = "f2md-networks/LuSTMiniScenario/due.actuated.sumocfg"

*.node[*].middleware.MisbehaviorCaService.AttackConstantPositionMinLatitude = 49.596
*.node[*].middleware.MisbehaviorCaService.AttackConstantPositionMaxLatitude = 49.619
*.node[*].middleware.MisbehaviorCaService.AttackConstantPositionMinLongitude = 6.092
*.node[*].middleware.MisbehaviorCaService.AttackConstantPositionMaxLongitude = 6.125

[Config f2md-LuSTScenario]

extends = f2md-LuSTNanoScenario

*.traci.launcher.sumocfg = "f2md-networks/LuSTScenario/due.actuated.sumocfg"

*.node[*].middleware.MisbehaviorCaService.AttackConstantPositionMinLatitude = 49.550
*.node[*].middleware.MisbehaviorCaService.AttackConstantPositionMaxLatitude = 49.650
*.node[*].middleware.MisbehaviorCaService.AttackConstantPositionMinLongitude = 6.039
*.node[*].middleware.MisbehaviorCaService.AttackConstantPositionMaxLongitude = 6.205

[Config f2md-UlmScenario]

extends = f2md-LuSTNanoScenario

*.traci.launcher.sumocfg = "f2md-networks/UlmScenario/UlmScenario.sumo.cfg"


[Config veins]
network = artery.veins.World

*.playgroundSizeX = 4000m
*.playgroundSizeY = 4000m
*.playgroundSizeZ = 50m

*.connectionManager.maxInterfDist = 1500m
*.connectionManager.sendDirect = true
*.connectionManager.coreDebug = false

*.withObstacles = true
*.obstacles.obstacles = xmldoc("config.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles")

*.node[*].nic.mac1609_4.txPower = 126mW
*.node[*].nic.phy80211p.decider = xmldoc("config.xml")
*.node[*].nic.phy80211p.analogueModels = xmldoc("config.xml")

*.node[*].applType = "artery.veins.ApplicationLayer"
*.node[*].appl.middleware.updateInterval = 0.1s
*.node[*].appl.middleware.datetime = "2013-06-01 12:35:00"
*.node[*].appl.middleware.services = xmldoc("services.xml")



[Config inet]
network = artery.inet.World

*.node[*].wlan[*].typename = "VanetNic"
*.node[*].wlan[*].radio.channelNumber = 180
*.node[*].wlan[*].radio.carrierFrequency = 5.9 GHz
*.node[*].wlan[*].radio.transmitter.power = 200 mW

*.node[*].middleware.updateInterval = 0.1s
*.node[*].middleware.datetime = "2013-06-01 12:35:00"
*.node[*].middleware.services = xmldoc("services.xml")


[Config inet_mco]
extends = inet
*.node[*].numRadios = 2
*.node[*].wlan[1].radio.channelNumber = 176
*.node[*].middleware.services = xmldoc("services-mco.xml")
*.node[*].middleware.mcoPolicy = xml("<mco default=\"CCH\"><application id=\"16480\" channel=\"176\" /></mco>")


[Config inet_security]
extends = inet
*.node[*].vanetza[*].security.typename = "SecurityEntity"


[Config inet_multiple_vehicle_types]
extends = inet
# see above for configuration of mapper's random number generator (rng)
seed-1-mt = ${seed=0, 23, 42, 1337, 0815, 4711}
*.traci.mapper.typename = "traci.MultiTypeModuleMapper"
*.traci.mapper.vehicleTypes = xmldoc("vehicles.xml")


[Config inet_nakagami]
extends = inet
*.radioMedium.pathLossType = "VanetNakagamiFading"


[Config envmod]
extends = inet
network = artery.envmod.World
**.identityRegistryModule = "idRegistry"
*.traci.mapper.vehicleType = "artery.envmod.Car"
*.environmentModel.drawObstacles = true
*.environmentModel.drawVehicles = true
*.environmentModel.preselectionMethod = ${preseletion=1,2,3}
*.environmentModel.obstacleTypes = "building shop"
*.environmentModel.traciModule = "traci"
*.environmentModel.nodeMobilityModule = ".mobility"
*.node[*].middleware.services = xmldoc("services-envmod.xml")
*.node[*].environmentModel.sensors = xmldoc("sensors.xml")
*.node[*].environmentModel.*.drawSensorCone = true
*.node[*].environmentModel.*.drawLinesOfSight = true
*.node[*].environmentModel.*.drawDetectedObjects = true
*.node[*].environmentModel.*.drawBlockingObstacles = true

*.node[*].environmentModel.FrontLongRangeRadar.fovRange = 150m
*.node[*].environmentModel.FrontLongRangeRadar.fovAngle = 10

*.node[*].environmentModel.FrontShortRangeRadar.fovRange = 65m
*.node[*].environmentModel.FrontShortRangeRadar.fovAngle = 80
*.node[*].environmentModel.FrontShortRangeRadar.numSegments = 4

*.node[*].environmentModel.RearLongRangeRadar.fovRange = 150m
*.node[*].environmentModel.RearLongRangeRadar.fovAngle = 10

*.node[*].environmentModel.RearShortRangeRadar.fovRange = 65m
*.node[*].environmentModel.RearShortRangeRadar.fovAngle = 80
*.node[*].environmentModel.RearShortRangeRadar.numSegments = 4

*.node[*].environmentModel.SeeThrough.fovRange = 50m


[Config inet_rsu]
extends = inet
*.numRoadSideUnits = 2

*.rsu[*].middleware.datetime = "2013-06-01 12:35:00"
*.rsu[*].middleware.services = xmldoc("services-rsu.xml")
*.rsu[0].**.protectedCommunicationZones = xml("<zones><zone latitude=\"49.576070\" longitude=\"11.015889\" /></zones>")

*.rsu[*].mobility.initialZ = 10m
*.rsu[0].mobility.initialX = 1273.5m
*.rsu[0].mobility.initialY = 1338.0m
*.rsu[1].mobility.initialX = 2000m
*.rsu[1].mobility.initialY = 1000m


[Config veins_rsu]
extends = veins
*.numRoadSideUnits = 2

*.rsu[*].appl.middleware.updateInterval = 0.1s
*.rsu[*].appl.middleware.datetime = "2013-06-01 12:35:00"
*.rsu[*].appl.middleware.services = xmldoc("services-rsu.xml")
*.rsu[0].**.protectedCommunicationZones = xml("<zones><zone latitude=\"49.576070\" longitude=\"11.015889\" /></zones>")

*.rsu[*].nic.mac1609_4.txPower = 126mW
*.rsu[*].nic.phy80211p.decider = xmldoc("config.xml")
*.rsu[*].nic.phy80211p.analogueModels = xmldoc("config.xml")

*.rsu[*].mobility.z = 10
*.rsu[0].mobility.x = 1273.5
*.rsu[0].mobility.y = 1338.0
*.rsu[1].mobility.x = 2000
*.rsu[1].mobility.y = 1000


[Config inet_antenna_offset]
extends = inet

*.node[*].withAntennaMobility = true
*.node[*].antennaMobility.offsetX = -2.5 m


[Config delayed_vehicle_insertion]
description = "insert a bulk of vehicles with individual delays"
extends = inet
*.traci.core.startTime = 120 s
*.traci.nodes.typename = "InsertionDelayNodeManager"


[Config region_of_interest_vehicle_insertion]
description = "Only manage vehicles within defined Regions of Interest (ROI)"
extends = inet
*.traci.nodes.typename = "RegionOfInterestNodeManager"
*.traci.nodes.regionsOfInterest = xmldoc("regions_of_interest.xml")


[Config roi_and_delay_vehicle_insertion]
description = "insert vehicles within Regions of Interest (ROI) after individual delays"
extends = inet
*.traci.core.startTime = 150 s
*.traci.nodes.typename = "ExtensibleNodeManager"
*.traci.nodes.numVehiclePolicies = 2
*.traci.nodes.vehiclePolicy[0].typename = "RegionOfInterestVehiclePolicy"
*.traci.nodes.vehiclePolicy[0].regionsOfInterest = xmldoc("regions_of_interest.xml")
*.traci.nodes.vehiclePolicy[1].typename = "InsertionDelayVehiclePolicy"
